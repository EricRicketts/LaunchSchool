exit
sum
exit
arr
pairs
exit
pairs
exit
eixt
selected_highs
exit
selected_highs
selected_hights
exit
counted_chars.select {|ary| ary.last.max}
counted_chars
exit
counted_chars
exit
sh = hsh.sort {|(k1, v1), (k2, v2)| v2 <=> v1}.to_h
hsh.sort {|(k1, v1), (k2, v2)| v2 <=> v1}.to_h
hsh
exit
hsh.sort_by {|k, v| v.first}.reverse.sort_by {|ary| ary.last.last}
hsh.sort_by {|k, v| v.first}.reverse
hsh.sort_by {|k, v| v.first}
hsh.sort_by {|k, v| v.first && v.last}
hsh.sort_by {|(k1, v1), (k2, v2)| (v2.first <=> v1.first) && (v1.last <=> v2.last)}
hsh.sort {|(k1, v1), (k2, v2)| (v2.first <=> v1.first)}
hsh.sort {|(k1, v1), (k2, v2)| (v2.first <=> v1.first) && (v1.last <=> v2.last)}
hsh.sort {|(k1, v1), (k2, v2)| v2.first <=> v1.first}
hsh.sort {|k1, (v11, v12), k2, (v21, v22)| v21 <=> v11}
hsh
exit
hsh
exit
hsh
c
hsh
c
hsh
c
n
hsh
n
hsh
n
exit
hsh
hsh['2']
hsh
hsh[char] = [string_array.count(char), idx]
idx
char
exit
string_array
hsh
exit
char
exit
hsh
exit
string_array.count("2")
string_array.count("1")
string_array
hsh
exit
combinations.each {|ary| p ary}
combinations.each do |ary|
combinations.length
combinations
exit
eixt
[array[idx1], array[idx2], array[idx3]]
exit
combinations
exit
combinations.each {|ary| p ary}
combinations.each do |ary|
x.length
x = combinations.uniq
combinations.length
combinations
exit
sort_by_first_appearance
exit
sort_by_first_appearance
exit
selected_maxes
max_occurances
sorted_ary
exit
max_occurances
sorted_ary
exit
ary = hsh.sort_by {|k, v| v.first}.reverse
hsh.sort_by {|k, v| v.first}.reverse
hsh.sort_by {|k, v| v.first}.reverse.to_h
hsh.sort_by {|k, v| v.first}
hsh
sorted_hsh
hsh
string
exit
eixt
sorted_hsh.first.first.to_i
sorted_hsh.first.keys
sorted_hsh.first.key
sorted_hsh.first
sorted_hsh
hsh
exit
hsh_by_size
exit
hsh.sort_by {|key, value| [value.first, value.last]}.reverse
hsh.sort_by {|key, value| [value.first, value.last]}
hsh
hsh['2'][0] = 4
hsh
hsh.sort_by {|key, value| value.first}
hsh.sort_by {|hash| hash}
hsh.sort_by {|hash| p hash; hash}
hsh.sort_by do |hash| p hash; hash.values end
hsh.sort_by do |hash|
hsh
exit
hsh
n
char
hsh
n
hsh
n
hsh
n
hsh
n
exit
hsh.values
hsh
hsh['1']
hsh['1'][1]
hsh
n
hsh['1']
char
hsh
n
hsh[char]
hsh
exit
hsh
exit
hsh.keys
hsh
exit
hsh
exit
n
string
quit
ary
n
arr
n
exit
s
c
exit
ary1.any? {|str| substring('').include?(str)}
ary1.any? {|str| substring('Fun').include?(str)}
ary1 = substring('Something')
exit
exiut
substring_srdjn('Something') == substring('Something')
substring_srdjn('Something')
exit
substring_srdjn('Something')
exit
substring('Fun')
substring('Something')
exit
substring('Something')
exit
substring(str)
str = 'abcde'
exit
str = 'abcde'
