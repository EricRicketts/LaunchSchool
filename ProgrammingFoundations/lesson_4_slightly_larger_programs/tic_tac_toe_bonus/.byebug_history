n
winner_or_tie?(board, selected_square, player_symbols[current_player])
selected_square
player_symbols[current_player]
current_player
board
n
exit
detect_column_winner(board, selected_square, player_symbols[current_player])
player_symbols
detect_column_winner(board, selected_square, player_symbols[current_player])
detect_column_winner(board, selected_square, player_symbol[current_player])
winner_or_tie?(board, selected_square, current_player)
winner_or_tie?(board, selected_square, player)
selected_square
board
current_player
n
winner_or_tie?(board, selected_square, current_player)
selected_square
current_player
board
n
current_player
n
winner_or_tie?(board, selected_square, current_player)
n
selected_square
n
current_player
n
s
winner_or_tie?(board, selected_square, current_player)
current_player
selected_square
board
exit
exi
selected_square
row
exit
board[0]
board
c
exit
str = squares.join(separator)
conjunction_string
separator
squares
exit
board
unoccupied_squares
n
board
n
board
n
board_with_updated_symbols
n
board
exit
c
board
exit
board_with_updated_symbols
n
board
exit
board
c
board
c
board
c
board
c
exit
board_with_updated_symbols
exit
index
row_index
exit
xit
eixt
exit
DIAGONAL.each { |cell| puts cell.first }
DIAGONAL.each { |cell| puts board[cell.first] }
board
DIAGONAL
adjusted_square
exit
DIAGONAL.map { |n| puts n; board[n] }
DIAGONAL.map { |n| board[n] }
DIAGONAL.map | |n| board[n] }
board
adjusted_square
square
DIAGONAL
diagonal_values
