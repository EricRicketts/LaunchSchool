#! /usr/bin/env ruby
require 'pry-byebug'
require 'pg'

module FieldOrder
  DESIRED_ORDER = %w[id created_on amount memo]
end

class TableFormat
  include FieldOrder
  OFFSET = 2

  attr_accessor :fields, :values

  def initialize(result_obj, fields, values)
    @fields = init_fields_hsh(fields, result_obj)
    @values = values
  end

  def print_table
    puts print_fields << print_values
  end

  private

  def associate_values_with_spacings
    spacings = fields.values
    values.map do |record|
      record.map.with_index do |str, idx|
        [str, spacings[idx]]
      end.to_h
    end
  end

  def format_values(values_with_spacings)
    values_with_spacings.inject([]) do |record, hsh|
      record << hsh.inject([]) do |str, (value, spacing)|
        str << value.rjust(spacing)
      end.join('|')
    end.join("\n").concat("\n")
  end

  def gen_separator
    fields.inject([]) do |str, (_, spacing)|
      str << '-' * spacing
    end.join('+').concat("\n")
  end

  def init_fields_hsh(field_names, result_obj)
    permutes = field_names.permutation(field_names.size).entries
    ordered_fields = permutes.select do |ary|
      ary == DESIRED_ORDER
    end.flatten

    ordered_fields.to_h do |name|
      [name, result_obj.field_values(name).map(&:length).max + OFFSET]
    end
  end

  def print_values
    values_with_spacings = associate_values_with_spacings
    format_values(values_with_spacings)
  end

  def print_fields
    col_names = fields.inject([]) do |columns, (name, spacing)|
      columns << name.rjust(spacing)
    end.join('|').concat("\n")

    col_names << gen_separator
  end
end


conn = PG::Connection.new(dbname: 'rb185')

sql_for_list = <<SQL_LIST
SELECT #{FieldOrder::DESIRED_ORDER.join(', ')}
FROM expenses;
SQL_LIST

result = conn.exec(sql_for_list)
tf = TableFormat.new(result, result.fields, result.values)
# binding.pry
p tf.print_table

conn.close






