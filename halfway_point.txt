Reflections at the Halfway Point
I am currently a bit beyond the halfway point at Launch School and I felt successful completion of the backend module provided more than enough experience of Launch School's pedagogy and material to share my impressions. Additionally, I will provide some personal advice for those who chose to participate in a coding school that is in class by itself (no pun intended!!).
Prior Career
I come from an electrical engineering background and I am making this transition to a software engineering well into my middle age. I was a transistor level chip designer at IBM for 17 years (prior to that I served in the military as a Marine Officer) before being laid off as part of a large non performant reduction in force. My transition to programming has been anything but smooth. As a matter of fact I can say until I started Launch School in earnest this career change has been an unmitigated disaster.
I had the opportunity to attend a stereotypical coding "boot camp" after my separation from IBM. In the past I told others this was the hardest intellectual endeavor I had ever experienced. Now, upon further reflection I would say it was the most frustrating academic experience I ever encountered. I was lost from the beginning. The curriculum not only covered a great variety of material it moved at such a fast pace that I never got to shore up the conceptual holes I accumulated along the way. Even though the head instructor graciously extended my participation by a month, it was clear to me by the end of that extra month I was not even close to grasping the foundational skills needed to be a programmer.
Naturally, going into my first software position I had a very high level of anxiety. I intuitively knew I was not prepared for the challenge even though it was an apprenticeship position, which by nature is easier than what would be required for a junior developer. My worst fears were born out as the first team I got assigned to was developing a browser based CAD (Computer Aided Design) system targeted for residential housing. I was unable to comprehend even the most basic aspects of how this software system worked which meant I had to deal with substantial knowledge debt for every assignment I encountered. I eventually resigned my position, feeling I would never advance past apprentice or more likely get fired.
Later, I was able to reenter the software field after getting some additional training via tutorials and some personal mentorship by a software developer who was very gracious with his time. I mistakingly focused on learning a particular web framework instead of trying to shore up the basic skills I needed as a programmer. Of course I cannot really blame myself for taking this approach as I thought the right framework provided the necessary "buzzword" on a resume or LinkedIn profile. Additionally, I did not have the necessary training or mindset to first assess my shortcomings in the fundamentals of web development, much less address and fix them.
In this, my second foray into software development, I worked for a contracting company which provided a team of developers to a company heavily involved in computer networks. The team I was assigned to wrote a suite of internal tools to increase the efficiency of maintaining the network. Though I did much better the second time around, actually feeling I made a significant contribution to the testing environment, I got fired four months after being promoted to a mid-level developer. To add to my frustration I never had a face to face about my job being in jeopardy, I just got a phone call saying I was fired because "my skill set was not needed going forward".
Some Comments
I wanted to discuss my personal background for two reasons. First as one can see I have experienced a number of setbacks and this led to serious doubts and concerns about my ability to program. I want to encourage any aspiring developer not to get discouraged, keep plugging away at the profession as I have, eventually you will be able to recognize the common patterns as they inevitably emerge in the course of your work. As a second note of encouragement base on my personal reflection and experience in both the engineering and software worlds, the best developers are not necessarily the brightest. Passion and persistence will trump brains almost every time. Grit will win in the long term. Think tortoise versus hare.
Secondly, 


knowledge debt
"learning how to learn" needs mastery of fundamentals
cannot learn to mastery with a "factory based" learning model
huge point, your skills will dictate what kind of jobs are available to you, the less your skills the less your job opportunities
Launch School prepares a student for a career in software engineering. It not only equips the student with the skills to begin a promising career but it also teaches students WHAT to focus on for the long term
Learn to form valid mental models